<template>
  <a-table
    :columns="columns"

    :d:data-source="data"
    :p:pagination="pagination"
    :loading="loading"
    @change="handleTableChange"

  >
  <template #id="{ id }">
      <a>{{ id }}</a>
  </template>
  <!-- <template v-slot:id =" id "><a> {{ id }} </a></template> -->

  <template v-slot:s:status="{text}">
    <span v-if="text ==='1'"><a-tag >pass</a-tag></span>
    <span v-else-if="text ==='2'"><a-tag>fail</a-tag></span>
    <span v-else><a-tag >undifined</a-tag></span>
  </template>


</a-table>



<div v-if="status ==='1'">
<a-tag >pass</a-tag>
</div>



</template>
<script>
import axios from 'axios';

// const queryData = params => {
//   return axios.post('http://127.0.0.1:8000/api/mcs', { params: params });
// };
const columns = [
  {
    title: 'Supplier Name ',
    dataIndex: 'SUPPLIER_NAME',
    sorter: true,
    width: '15%',
    scopedSlots: { customRender: 'id' },
  },

  {
    title: 'Supplier type',
    dataIndex: 'SUPPLIER_TYPE',
    filters: [
      { text: 'COT', value: 'COT' },
      { text: 'COW', value: 'COW' },
    ],
    width: '15%',
  },
  {
    title: 'Wafer ID',
    dataIndex: 'WAFER_ID',
    sorter: true,
    width: '15%',
    scopedSlots: { customRender: 'id' },
  },
  {
    title: 'Wafer Size',
    dataIndex: 'WAFER_SIZE',
  },

  {
    title: 'status',
    dataIndex: 'WAFER_ID',
    scopedSlots: { customRender: 'status' },
  },
];


import demo from "@/services/mcsService.js"
// const queryData=[]

export default {
  data() {
    return {
      data: [],
      pagination: {},
      loading: false,
      columns,
      testing: {
        "SUPPLIER_NAME": null,
        "SUPPLIER_TYPE": null,
        "WAFER_ID": null,
        "WAFER_SIZE": null,
        "LED_SPEC_WD_AVG": null,
        "LED_SPEC_WD_MIN":null,
        "LED_SPEC_WD_MAX": null
    }
    };
  },
  mounted() {
    // this.fetch();
    this.onSubmit();
  },
  methods: {
    onSubmit() {
      demo.mcs(JSON.stringify(this.testing))
      .then(response => {
        console.log('res correct!', response.data)
        this.data = response.data
      })
      .catch(e => {
        console.log(e)(e)
      })
    },

    handleTableChange(pagination, filters, sorter) {
      console.log(pagination);
      const pager = { ...this.pagination };
      pager.current = pagination.current;
      this.pagination = pager;
      this.fetch({
        results: pagination.pageSize,
        page: pagination.current,
        sortField: sorter.field,
        sortOrder: sorter.order,
        ...filters,
      });
    },


    // fetch(params = {}) {
    //   this.loading = true;
    //   queryData({
    //     results: 10,
    //     ...params,
    //   }).then(({ data }) => {
    //     const pagination = { ...this.pagination };
    /     / Read total count from server
    /     / pagination.total = data.totalCount;
    //     pagination.total = 200;
    //     this.loading = false;
    //     this.data = data.results;
    //     this.pagination = pagination;
    //   });
    // },

  },
};
</script>
